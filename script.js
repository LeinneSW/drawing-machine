// üëâ DOM
const addBtn = document.getElementById('addBtn');
const drawBtn = document.getElementById('drawBtn');
const listEl = document.getElementById('participantsList');
const countEl = document.getElementById('count');

const modal = document.getElementById('drawModal');
const scrollingList = document.getElementById('scrollingList');
const stopBtn = document.getElementById('stopBtn');
const closeBtn = document.getElementById('closeBtn');
const resultEl = document.getElementById('result');

let animationId = null
let participants = (() => {
    try{
        const json = JSON.parse(localStorage.getItem('items') || '[]')
        if(Array.isArray(json)){
            return json;
        }
    }catch{}
    localStorage.setItem('items', '[]')
    return []
})()

const renderList = () => {
    listEl.innerHTML = participants.map(n => `<li ondblclick='removeItem(this.textContent)'>${n}</li>`).join('');
    countEl.textContent = participants.length + '';
}

const addItem = (...names) => {
    participants.push(...names);
    localStorage.setItem('items', JSON.stringify(participants))
    renderList();
}

const removeItem = (name) => {
    participants = participants.filter(v => v !== name)
    localStorage.setItem('items', JSON.stringify(participants))
    renderList();
}

// Ïä§ÌÅ¨Î°§ Î¶¨Ïä§Ìä∏ Íµ¨ÏÑ±
function setupModal(){
    const items = shuffle(participants);
    for(let i = 0; i < 5; i++) items.push(...items);
    scrollingList.innerHTML = items.map(n => `<li>${n}</li>`).join('');
}

function shuffle(arr){ // ÌîºÏÖî‚ÄìÏòàÏù¥Ï∏†
    const result = [...arr]
    for(let i = result.length - 1; i > 0; i--){
        const j = Math.floor(Math.random() * (i + 1));
        [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
}

renderList()

/* --------------------------------------------------------
 * Ï∞∏Í∞ÄÏûê Ï∂îÍ∞Ä (Prompt ÏûÖÎ†•)
 * ------------------------------------------------------*/
addBtn.addEventListener('click', () => {
    const input = prompt('Ï∞∏Í∞ÄÏûê Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏΩ§ÎßàÎ°ú Íµ¨Î∂Ñ)');
    if(!input) return;
    const names = input.split(',').map(n => n.trim()).filter(v => v.length >= 2);
    addItem(...names)
});

/* --------------------------------------------------------
 *    duration : ÌöåÏ†Ñ Ïú†ÏßÄ ÏãúÍ∞Ñ(ms)
 *    speed    : px/frame (60fps Í∏∞Ï§Ä)
 * ------------------------------------------------------*/
function startDraw(duration, speed){
    if(!participants.length){
        alert('Ï∞∏Í∞ÄÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§!');
        return;
    }

    setupModal();
    modal.classList.remove('hidden');
    resultEl.classList.add('hidden');

    stopBtn.disabled = false;
    stopBtn.onclick = () => (stopTriggered = true);
    closeBtn.onclick = stopDraw;

    const itemHeight = scrollingList.querySelector('li').getBoundingClientRect().height;
    const randomIndex = participants.length + Math.floor(Math.random() * participants.length)
    const baseTarget = scrollingList.children[randomIndex].offsetTop - (scrollingList.clientHeight / 2 - itemHeight / 2);
    scrollingList.scrollTo({top: baseTarget});

    let v = 0.1;            // px/frame
    let maxV = v;
    let prevIndex = null;       // Ïã§ÏãúÍ∞Ñ Í∞ïÏ°∞Ïö©
    let slowStart = null;
    let stopTriggered = false;

    const t0 = performance.now();
    animationId = requestAnimationFrame(step);
    const maxScroll = scrollingList.scrollHeight - scrollingList.clientHeight - itemHeight;

    let scroll = scrollingList.scrollTop
    function step(now){
        const elapsed = now - t0;
        elapsed >= duration && (stopTriggered = true); // ÏûêÎèô Ï¢ÖÎ£å ÏòàÏïΩ
        if(stopTriggered){
            if(slowStart === null){
                slowStart = now;
                stopBtn.disabled = true;
            }
            const p = Math.min(1, (now - slowStart) / 3000); // Í∞êÏÜçÏóê Í±∏Î¶¨ÎäîÏãúÍ∞Ñ, ms
            v = Math.min(maxV, speed) * (1 - p * p);         // ease‚Äëout(quad)
        }else{
            const p = Math.min(1, elapsed / 1500); // Í∞ÄÏÜçÏóê Í±∏Î¶¨ÎäîÏãúÍ∞Ñ, ms
            v = speed * (p * p);                   // ease‚Äëin(quad)
        }
        maxV = Math.max(v, maxV)

        // ÏßÅÏ†ë Í∞ÄÏÇ∞/Í∞êÏÇ∞Ïãú ÏÜåÏàòÍ∞íÏù¥ ÏùºÎ∂Ä ÎàÑÎùΩÎê®
        scrollingList.scrollTop = (scroll += v);
        if(scrollingList.scrollTop >= maxScroll){
            scrollingList.scrollTop = (scroll -= itemHeight * participants.length * 15);
        }

        highlightCenter();
        if(stopTriggered && v < 0.15){
            alignAndFinish();
        }else{
            animationId = requestAnimationFrame(step);
        }
    }

    /* ÌòÑÏû¨ Ï§ëÏïô Ìï≠Î™© ÌïòÏù¥ÎùºÏù¥Ìä∏ */
    function highlightCenter(){
        // Í∞ÄÏãú ÏòÅÏó≠ Ï†ïÏ§ëÏïôÏùò Ï†àÎåÄ ÏúÑÏπò(px)
        const centerLine = scrollingList.scrollTop + scrollingList.clientHeight / 2;

        // Ï§ëÏïôÏÑ†Ïù¥ Î™á Î≤àÏß∏ ÌñâÏóê Îì§Ïñ¥ÏôîÎäîÏßÄ Í≥ÑÏÇ∞
        const index = Math.floor(centerLine / itemHeight);

        // ÏÑ†ÌÉù Í∞±Ïã†
        if(prevIndex !== index){
            // TODO: Play Sound
            scrollingList.children[index].classList.add('selected');
            scrollingList.children[prevIndex]?.classList.remove('selected');
            prevIndex = index;
        }
    }

    /* Í∞ÄÏû• Ïù∏Ï†ëÌïú Ìï≠Î™©ÏúºÎ°ú Ïù¥Îèô */
    function alignAndFinish(){
        const sel = scrollingList.children[prevIndex]
        const baseTarget = sel.offsetTop - (scrollingList.clientHeight / 2 - itemHeight / 2);
        scrollingList.onscrollend = async () => {
            scrollingList.onscrollend = null
            await new Promise(resolve => setTimeout(resolve, 100));
            resultEl.classList.remove('hidden');
            resultEl.textContent = `üéâ ÎãπÏ≤®: ${sel.textContent}!`;
            // TODO: Play Sound
        };
        scrollingList.scrollTo({top: baseTarget, behavior: 'smooth'});
    }
}
const stopDraw = () => {
    modal.classList.add('hidden')
    animationId && cancelAnimationFrame(animationId)
}

drawBtn.addEventListener('click', () => startDraw(10000, 8));
document.onkeydown = e => e.key === 'Escape' && stopDraw();